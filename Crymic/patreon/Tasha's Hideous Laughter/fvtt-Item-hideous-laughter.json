{
  "name": "Hideous Laughter",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/explosion-magenta-2.jpg",
  "data": {
    "description": {
      "value": "<p>A creature of your choice that you can see within range perceives everything as hilariously funny and falls into fits of laughter if this spell affects it. The target must succeed on a Wisdom saving throw or fall prone, becoming Incapacitated and unable to stand up for the Duration. A creature with an Intelligence score of 4 or less isn’t affected.</p><p>At the end of each of its turns, and each time it takes damage, the target can make another Wisdom saving throw. The target has advantage on the saving throw if it’s triggered by damage. On a success, the spell ends.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 30,
      "long": 0,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "save",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": "",
      "value": ""
    },
    "formula": "",
    "save": {
      "ability": "wis",
      "dc": 13,
      "scaling": "spell"
    },
    "level": 1,
    "school": "enc",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": true,
      "material": true,
      "ritual": false,
      "concentration": true
    },
    "materials": {
      "value": "Tiny tarts and a feather that is waved in the air",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": false
    },
    "scaling": {
      "mode": "none",
      "formula": ""
    }
  },
  "effects": [
    {
      "_id": "F9jiZvkPcWtaRo4b",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "systems/dnd5e/icons/spells/explosion-magenta-2.jpg",
      "label": "Hideous Laughter",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "macro.itemMacro"
    },
    {
      "_id": "ksYH0WT4SJUIq2rM",
      "changes": [],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "modules/combat-utility-belt/icons/incapacitated.svg",
      "label": "Incapacitated",
      "transfer": false,
      "flags": {
        "core": {
          "statusId": "combat-utility-belt.incapacitated"
        },
        "combat-utility-belt": {
          "conditionId": "incapacitated",
          "overlay": false
        },
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null
    },
    {
      "_id": "I4lpJw1dnmcEPMYy",
      "changes": [
        {
          "key": "flags.midi-qol.disadvantage.attack.all",
          "mode": 2,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.grants.advantage.attack.mwak",
          "mode": 2,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.grants.advantage.attack.msak",
          "mode": 2,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.grants.disadvantage.attack.rwak",
          "mode": 2,
          "value": "1",
          "priority": "20"
        },
        {
          "key": "flags.midi-qol.grants.disadvantage.attack.rsak",
          "mode": 2,
          "value": "1",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "modules/combat-utility-belt/icons/prone.svg",
      "label": "Prone",
      "transfer": false,
      "flags": {
        "ActiveAuras": {
          "isAura": false,
          "radius": null,
          "aura": "None",
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        },
        "core": {
          "statusId": "combat-utility-belt.prone"
        },
        "combat-utility-belt": {
          "conditionId": "prone",
          "overlay": false
        },
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        }
      },
      "tint": null,
      "selectedKey": [
        "StatusEffect",
        "StatusEffect",
        "StatusEffect",
        "StatusEffect",
        "StatusEffect"
      ]
    }
  ],
  "sort": 0,
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Hideous Laughter",
          "type": "script",
          "author": "Tyd5yiqWrRZMvG30",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "//##################################\n// Read First!!! Requires both Dynamic Active Effects + Midi-QoL\n// DAE setup\n// Requires: Cub_Condition Callback Macro, Times Up Module.\n// Duration: Macro Repeat: End of each turn.\n// Effects: Either use Item Macro or Macro Execute, no args needed.\n//##################################\n\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst actorD = canvas.tokens.get(lastArg.tokenId).actor;\nconst itemD = lastArg.efData.flags.dae.itemData;\nconst origin = lastArg.origin;\nconst itemUuid = await fromUuid(origin);\nconst caster = itemUuid.actor;\nconst gameRound = game.combat ? game.combat.round : 0;\n\nasync function damageCheck(workflow) {\n    let effectData = [{\n        label: \"Damage Save\",\n        icon: \"icons/skills/wounds/injury-triple-slash-bleed.webp\",\n        origin: origin,\n        disabled: false,\n        flags: { dae: { specialDuration: [\"isDamaged\"] } },\n        duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n        changes: [{ key: `flags.midi-qol.advantage.ability.save.all`, mode: 2, value: 1, priority: 20 }]\n    }];\n    let damageSave = actorD.effects.find(i => i.data.label === \"Damage Save\");\n    if (!damageSave) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: lastArg.actorUuid, effects: effectData });\n    await wait(600);\n    let attackWorkflow = workflow.damageList.map((i) => ({ tokenId: i?.tokenId, totalDamage: i?.totalDamage })).filter(i => i.tokenId === tokenD.id);\n    let lastAttack = attackWorkflow[attackWorkflow.length - 1];\n    if (lastAttack?.totalDamage > 0) {\n        let workflow = await MidiQOL.Workflow.getWorkflow(origin);\n        workflow.advantage = true;\n        let itemCard = await MidiQOL.showItemCard.bind(workflow.item)(false, workflow, false);\n        workflow.itemCardId = await itemCard.id;\n        await workflow.checkSaves(false);\n        await workflow.displaySaves(false, true);\n        let save = await workflow.saveResults[0];\n        let DC = workflow.item.data.data.save.dc;\n        game.dice3d?.showForRoll(save);\n        await ui.chat.scrollBottom();\n        if (save.total >= DC) {\n            let removeConc = caster.effects.find(i => i.data.label === \"Concentrating\");\n            if (removeConc) await MidiQOL.socket().executeAsGM(\"removeEffects\", { actorUuid: caster.uuid, effects: [removeConc.id] });\n        } else {\n            ChatMessage.create({\n                user: game.user._id,\n                speaker: ChatMessage.getSpeaker({ token: tokenD }),\n                content: `${tokenD.name} laughs maniacally`,\n                type: CONST.CHAT_MESSAGE_TYPES.EMOTE\n            });\n        }\n    }\n}\n\nif (args[0] === \"on\") {\n    let hookId = Hooks.on(\"midi-qol.DamageRollComplete\", damageCheck);\n    DAE.setFlag(actorD, \"hLaughter\", hookId);\n}\n\nif (args[0] === \"each\") {\n    let workflow = await MidiQOL.Workflow.getWorkflow(origin);\n    let itemCard = await MidiQOL.showItemCard.bind(workflow.item)(false, workflow, false);\n    workflow.itemCardId = await itemCard.id;\n    workflow.itemCardId = await itemCard.id;\n    await workflow.checkSaves(false);\n    await workflow.displaySaves(false, true);\n    let save = await workflow.saveResults[0];\n    let DC = workflow.item.data.data.save.dc;\n    game.dice3d?.showForRoll(save);\n    await ui.chat.scrollBottom();\n    if (save.total >= DC) {\n        let removeConc = caster.effects.find(i => i.data.label === \"Concentrating\");\n        if (removeConc) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: caster.uuid, effects: [removeConc.id] });\n    } else {\n        ChatMessage.create({\n            user: game.user._id,\n            speaker: ChatMessage.getSpeaker({ token: tokenD }),\n            content: `${tokenD.name} laughs maniacally`,\n            type: CONST.CHAT_MESSAGE_TYPES.EMOTE\n        });\n    }\n}\n\nif (args[0] === \"off\") {\n    let hookId = DAE.getFlag(actorD, \"hLaughter\");\n    Hooks.off(\"midi-qol.DamageRollComplete\", hookId);\n    DAE.unsetFlag(actorD, \"hLaughter\");\n    if (actorD.data.data.abilities.int.value <= 4) return {};\n    let prone = actorD.effects.find(i => i.data.label === \"Prone\");\n    let effectData = [{\n        label: \"Prone\",\n        icon: \"modules/combat-utility-belt/icons/prone.svg\",\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n        changes: [\n            { key: `flags.midi-qol.disadvantage.attack.all`, mode: 2, value: 1, priority: 20 },\n            { key: `flags.midi-qol.grants.advantage.attack.mwak`, mode: 2, value: 1, priority: 20 },\n            { key: `flags.midi-qol.grants.advantage.attack.msak`, mode: 2, value: 1, priority: 20 },\n            { key: `flags.midi-qol.grants.disadvantage.attack.rwak`, mode: 2, value: 1, priority: 20 },\n            { key: `flags.midi-qol.grants.disadvantage.attack.rsak`, mode: 2, value: 1, priority: 20 }\n        ]\n    }];\n    if (!prone) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: lastArg.actorUuid, effects: effectData });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "enhanced-terrain-layer": {
      "multiple": 1,
      "min": 0,
      "max": 0,
      "environment": ""
    },
    "midi-qol": {
      "onUseMacroName": "",
      "forceCEOn": false
    },
    "core": {
      "sourceId": "Item.LgasQIZjVdPDIXXd"
    },
    "exportSource": {
      "world": "darklands",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}