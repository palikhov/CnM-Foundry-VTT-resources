{
  "name": "Bard College of Swords",
  "type": "character",
  "img": "systems/dnd5e/tokens/heroes/BardLute.webp",
  "data": {
    "abilities": {
      "str": {
        "value": 8,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "mod": -1,
        "save": -1,
        "prof": 0,
        "saveBonus": 0,
        "checkBonus": 0,
        "dc": 9
      },
      "dex": {
        "value": 16,
        "proficient": 1,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "mod": 3,
        "save": 5,
        "prof": 2,
        "saveBonus": 0,
        "checkBonus": 0,
        "dc": 13
      },
      "con": {
        "value": 14,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "mod": 2,
        "save": 2,
        "prof": 0,
        "saveBonus": 0,
        "checkBonus": 0,
        "dc": 12
      },
      "int": {
        "value": 10,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "mod": 0,
        "save": 0,
        "prof": 0,
        "saveBonus": 0,
        "checkBonus": 0,
        "dc": 10
      },
      "wis": {
        "value": 12,
        "proficient": 0,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "mod": 1,
        "save": 1,
        "prof": 0,
        "saveBonus": 0,
        "checkBonus": 0,
        "dc": 11
      },
      "cha": {
        "value": 16,
        "proficient": 1,
        "bonuses": {
          "check": "",
          "save": ""
        },
        "mod": 3,
        "save": 5,
        "prof": 2,
        "saveBonus": 0,
        "checkBonus": 0,
        "dc": 13
      }
    },
    "attributes": {
      "ac": {
        "flat": 13,
        "calc": "default",
        "formula": "",
        "min": 0
      },
      "hp": {
        "value": 10,
        "min": 0,
        "max": 10,
        "temp": null,
        "tempmax": null
      },
      "init": {
        "value": 0,
        "bonus": 0,
        "mod": 3,
        "prof": 0,
        "total": 3
      },
      "movement": {
        "burrow": 0,
        "climb": 0,
        "fly": 0,
        "swim": 0,
        "walk": 30,
        "units": "ft",
        "hover": false
      },
      "senses": {
        "darkvision": 60,
        "blindsight": 0,
        "tremorsense": 0,
        "truesight": 0,
        "units": "ft",
        "special": ""
      },
      "spellcasting": "cha",
      "death": {
        "success": 0,
        "failure": 0
      },
      "exhaustion": 0,
      "inspiration": false,
      "encumbrance": {
        "value": 87.4,
        "max": 120,
        "pct": 72.83333333333333,
        "encumbered": true
      },
      "hd": 1,
      "prof": 2,
      "spelldc": 13
    },
    "details": {
      "biography": {
        "value": "<p>Beiro was a famed entertainer at his local tavern, when he one day ran out of stories to tell. To solve this, he set out to make his own stories, so as to one day tell them again at his tavern.</p>\n<blockquote>Actor artwork provided by <a href=\"https://www.forgotten-adventures.net/\" target=\"_blank\" rel=\"noopener\">Forgotten Adventures</a></blockquote>",
        "public": ""
      },
      "alignment": "Chaotic Neutral",
      "race": "Half Elf",
      "background": "Musician",
      "originalClass": "",
      "xp": {
        "value": 0,
        "min": 0,
        "max": 300,
        "pct": 0
      },
      "appearance": "",
      "trait": "",
      "ideal": "",
      "bond": "",
      "flaw": "",
      "level": 1,
      "hd": {
        "_deprecated": true
      },
      "attunedItemsMax": "3",
      "attunedItemsCount": 0,
      "maxPreparedSpells": null,
      "gender": "",
      "age": "",
      "height": "",
      "weight": "",
      "eyes": "",
      "skin": "",
      "hair": "",
      "notes1name": "",
      "notes2name": "",
      "notes3name": "",
      "notes4name": ""
    },
    "traits": {
      "size": "med",
      "di": {
        "value": [],
        "custom": ""
      },
      "dr": {
        "value": [],
        "custom": ""
      },
      "dv": {
        "value": [],
        "custom": ""
      },
      "ci": {
        "value": [],
        "custom": "Magic can't put you to sleep; Advantage on saving throws against being charmed"
      },
      "languages": {
        "value": [
          "common",
          "elvish",
          "gnomish"
        ],
        "custom": ""
      },
      "weaponProf": {
        "value": [
          "sim"
        ],
        "custom": "Hand Crossbows; Longswords; Rapiers; Shortswords"
      },
      "armorProf": {
        "value": [
          "lgt"
        ],
        "custom": ""
      },
      "toolProf": {
        "value": [],
        "custom": "Flute; Lyre; Drums; Lute"
      },
      "perception": {
        "_deprecated": true
      }
    },
    "currency": {
      "pp": 0,
      "gp": 15,
      "ep": 0,
      "sp": 0,
      "cp": 0
    },
    "skills": {
      "acr": {
        "value": 1,
        "ability": "dex",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 15,
        "prof": 2,
        "total": 5
      },
      "ani": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11,
        "prof": 0,
        "total": 1
      },
      "arc": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 0,
        "passive": 10,
        "prof": 0,
        "total": 0
      },
      "ath": {
        "value": 0,
        "ability": "str",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": -1,
        "passive": 9,
        "prof": 0,
        "total": -1
      },
      "dec": {
        "value": 0,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 13,
        "prof": 0,
        "total": 3
      },
      "his": {
        "value": 1,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 0,
        "passive": 12,
        "prof": 2,
        "total": 2
      },
      "ins": {
        "value": 1,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 13,
        "prof": 2,
        "total": 3
      },
      "itm": {
        "value": 0,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 13,
        "prof": 0,
        "total": 3
      },
      "inv": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 0,
        "passive": 10,
        "prof": 0,
        "total": 0
      },
      "med": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11,
        "prof": 0,
        "total": 1
      },
      "nat": {
        "value": 0,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 0,
        "passive": 10,
        "prof": 0,
        "total": 0
      },
      "prc": {
        "value": 1,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 13,
        "prof": 2,
        "total": 3
      },
      "prf": {
        "value": 1,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 15,
        "prof": 2,
        "total": 5
      },
      "per": {
        "value": 1,
        "ability": "cha",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 15,
        "prof": 2,
        "total": 5
      },
      "rel": {
        "value": 1,
        "ability": "int",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 0,
        "passive": 12,
        "prof": 2,
        "total": 2
      },
      "slt": {
        "value": 1,
        "ability": "dex",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 15,
        "prof": 2,
        "total": 5
      },
      "ste": {
        "value": 0,
        "ability": "dex",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 3,
        "passive": 13,
        "prof": 0,
        "total": 3
      },
      "sur": {
        "value": 0,
        "ability": "wis",
        "bonuses": {
          "check": "",
          "passive": ""
        },
        "bonus": 0,
        "mod": 1,
        "passive": 11,
        "prof": 0,
        "total": 1
      }
    },
    "spells": {
      "spell1": {
        "value": 1,
        "override": null,
        "max": 2
      },
      "spell2": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell3": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell4": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell5": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell6": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell7": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell8": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "spell9": {
        "value": 0,
        "override": null,
        "max": 0
      },
      "pact": {
        "value": 0,
        "override": null,
        "max": 0,
        "level": 0
      },
      "spell0": {
        "_deprecated": true,
        "max": 0,
        "value": null
      }
    },
    "bonuses": {
      "mwak": {
        "attack": "",
        "damage": ""
      },
      "rwak": {
        "attack": "",
        "damage": ""
      },
      "msak": {
        "attack": "",
        "damage": ""
      },
      "rsak": {
        "attack": "",
        "damage": ""
      },
      "abilities": {
        "check": "",
        "save": "",
        "skill": ""
      },
      "spell": {
        "dc": ""
      }
    },
    "resources": {
      "primary": {
        "value": 2,
        "max": 6,
        "sr": false,
        "lr": false,
        "label": "Bardic Inspiration"
      },
      "secondary": {
        "value": null,
        "max": null,
        "sr": false,
        "lr": false,
        "label": ""
      },
      "tertiary": {
        "value": null,
        "max": null,
        "sr": false,
        "lr": false,
        "label": ""
      }
    }
  },
  "token": {
    "flags": {
      "monks-tokenbar": {
        "include": "default"
      },
      "monks-enhanced-journal": {
        "chatbubble": ""
      },
      "splatter": {
        "bloodColor": ""
      },
      "monks-little-details": {
        "token-highlight": ""
      },
      "token-hud-wildcard": {
        "default": ""
      },
      "perfect-vision": {
        "visionRules": "default",
        "monoVisionColor": "",
        "sightLimit": null
      }
    },
    "name": "Bard College of Swords",
    "displayName": 30,
    "img": "systems/dnd5e/tokens/heroes/BardLute.webp",
    "tint": null,
    "width": 1,
    "height": 1,
    "scale": 1,
    "mirrorX": false,
    "mirrorY": false,
    "lockRotation": false,
    "rotation": 0,
    "vision": true,
    "dimSight": 60,
    "brightSight": 0,
    "dimLight": 0,
    "brightLight": 0,
    "sightAngle": 0,
    "lightAngle": 0,
    "lightColor": null,
    "lightAlpha": 1,
    "lightAnimation": {
      "speed": 5,
      "intensity": 5
    },
    "actorId": "BnukfoG210lqJ9a2",
    "actorLink": true,
    "disposition": 1,
    "displayBars": 40,
    "bar1": {
      "attribute": "attributes.hp"
    },
    "bar2": {
      "attribute": ""
    },
    "randomImg": false,
    "alpha": 1,
    "x": null,
    "y": null,
    "elevation": null
  },
  "items": [
    {
      "_id": "DPTz84c6sWcBSuQg",
      "name": "Dagger",
      "type": "weapon",
      "data": {
        "description": {
          "value": "<p>A short metal blade mounted to a small hilt and crossguard. The dagger makes an effective side armament for hardened warriors or a hidden blade for assassins and thieves.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "PHB pg. 149",
        "quantity": 1,
        "weight": 1,
        "price": 2,
        "attunement": 0,
        "equipped": false,
        "rarity": "common",
        "identified": true,
        "activation": {
          "type": "action",
          "cost": 1,
          "condition": ""
        },
        "duration": {
          "value": 0,
          "units": ""
        },
        "target": {
          "value": 0,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": 20,
          "long": 60,
          "units": "ft"
        },
        "uses": {
          "value": 0,
          "max": 0,
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "",
        "actionType": "mwak",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": null
        },
        "damage": {
          "parts": [
            [
              "1d4 + @mod",
              "piercing"
            ]
          ],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "armor": {
          "value": 10
        },
        "hp": {
          "value": 0,
          "max": 0,
          "dt": null,
          "conditions": ""
        },
        "weaponType": "simpleM",
        "baseItem": "",
        "properties": {
          "fin": true,
          "lgt": true,
          "thr": true,
          "amm": false,
          "hvy": false,
          "fir": false,
          "foc": false,
          "lod": false,
          "rch": false,
          "rel": false,
          "ret": false,
          "spc": false,
          "two": false,
          "ver": false
        },
        "proficient": true
      },
      "sort": 1001,
      "flags": {},
      "img": "icons/weapons/daggers/dagger-jeweled-purple.webp",
      "effects": [],
      "folder": null,
      "permission": {
        "default": 0
      }
    },
    {
      "_id": "vRbfWjO0wkfi2EUS",
      "name": "Rapier",
      "type": "weapon",
      "data": {
        "description": {
          "value": "<p>A thin tensile metal blade, light in weight but long in reach designed for quick darting attacks to target weak points in enemy defenses with lightning swiftness.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "PHB pg. 149",
        "quantity": 1,
        "weight": 2,
        "price": 25,
        "attunement": 0,
        "equipped": true,
        "rarity": "common",
        "identified": true,
        "activation": {
          "type": "action",
          "cost": 1,
          "condition": ""
        },
        "duration": {
          "value": null,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": 5,
          "long": null,
          "units": "ft"
        },
        "uses": {
          "value": 0,
          "max": 0,
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "",
        "actionType": "mwak",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": null
        },
        "damage": {
          "parts": [
            [
              "1d8 + @mod",
              "piercing"
            ]
          ],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "armor": {
          "value": 10
        },
        "hp": {
          "value": 0,
          "max": 0,
          "dt": null,
          "conditions": ""
        },
        "weaponType": "martialM",
        "baseItem": "",
        "properties": {
          "fin": true,
          "amm": false,
          "fir": false,
          "foc": false,
          "hvy": false,
          "lgt": false,
          "lod": false,
          "rch": false,
          "rel": false,
          "ret": false,
          "spc": false,
          "thr": false,
          "two": false,
          "ver": false
        },
        "proficient": true
      },
      "sort": 1002,
      "flags": {},
      "img": "icons/weapons/swords/sword-guard-brown.webp",
      "effects": [],
      "folder": null,
      "permission": {
        "default": 0
      }
    },
    {
      "_id": "QeJyd2v24zGDwXbq",
      "name": "Leather Armor",
      "type": "equipment",
      "data": {
        "description": {
          "value": "<p>The breastplate and shoulder protectors of this armor are made of leather that has been stiffened by being boiled in oil. The rest of the armor is made of softer and more flexible materials.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "PHB pg. 144",
        "quantity": 1,
        "weight": 10,
        "price": 10,
        "attunement": 0,
        "equipped": true,
        "rarity": "common",
        "identified": true,
        "activation": {
          "type": "",
          "cost": 0,
          "condition": ""
        },
        "duration": {
          "value": null,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": null,
          "long": null,
          "units": ""
        },
        "uses": {
          "value": 0,
          "max": 0,
          "per": null
        },
        "consume": {
          "type": "",
          "target": null,
          "amount": null
        },
        "ability": null,
        "actionType": "",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": null
        },
        "damage": {
          "parts": [],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "armor": {
          "value": 11,
          "type": "light",
          "dex": null
        },
        "hp": {
          "value": 0,
          "max": 0,
          "dt": null,
          "conditions": ""
        },
        "baseItem": "",
        "speed": {
          "value": null,
          "conditions": ""
        },
        "strength": null,
        "stealth": false,
        "proficient": true
      },
      "sort": 2003,
      "flags": {},
      "img": "icons/equipment/chest/breastplate-quilted-brown.webp",
      "effects": [],
      "folder": null,
      "permission": {
        "default": 0
      }
    },
    {
      "_id": "z5AuTPscfqCMs9Qt",
      "name": "Bard",
      "type": "class",
      "data": {
        "description": {
          "value": "<p>As a bard, you gain the following class features.</p>\n<h3>Hit Points</h3>\n<p><strong>Hit Dice:</strong> 1d8 per bard level<br /><strong>Hit Points at 1st Level:</strong> 8 + your Constitution modifier<br /><strong>Hit Points at Higher Levels:</strong> 1d8 (or 5) + your Constitution modifier per bard level after 1st</p>\n<h3>Proficiencies</h3>\n<p><strong>Armor:</strong> Light armor<br /><strong>Weapons:</strong> Simple weapons, hand crossbows, longswords, rapiers, shortswords<br /><strong>Tools:</strong> Three musical instruments of your choice<br /><strong>Saving Throws:</strong> Dexterity, Charisma<br /><strong>Skills:</strong> Choose any three</p>\n<h3>Equipment</h3>\n<p>You start with the following equipment, in addition to the equipment granted by your background:</p>\n<ul>\n<li>(a) a rapier, (b) a longsword, or (c) any simple weapon</li>\n<li>(a) a diplomat’s pack or (b) an entertainer’s pack</li>\n<li>(a) a lute or (b) any other musical instrument</li>\n<li>Leather armor and a dagger</li>\n</ul>\n<h1>Bard Advancement</h1>\n<table>\n<thead>\n<tr>\n<td>Level</td>\n<td>Proficiency Bonus</td>\n<td>Features</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1st</td>\n<td>+2</td>\n<td>@Compendium[dnd5e.classfeatures.u4NLajXETJhJU31v]{Spellcasting}, @Compendium[dnd5e.classfeatures.hpLNiGq7y67d2EHA]{Bardic Inspiration (d6)}</td>\n</tr>\n<tr>\n<td>2nd</td>\n<td>+2</td>\n<td>@Compendium[dnd5e.classfeatures.ezWijmCnlnQ9ZRX2]{Jack of All Trades}, @Compendium[dnd5e.classfeatures.he8RpPXwSl2lVSIk]{Song of Rest (d6)}</td>\n</tr>\n<tr>\n<td>3rd</td>\n<td>+2</td>\n<td>@Compendium[dnd5e.classfeatures.ILhzFHiRrqgQ9dFJ]{Bard College} @Compendium[dnd5e.classfeatures.aQLg7BWdRnm4Hr9S]{Expertise}</td>\n</tr>\n<tr>\n<td>4th</td>\n<td>+2</td>\n<td>@Compendium[dnd5e.classfeatures.s0Cc2zcX0JzIgam5]{Ability Score Improvement}</td>\n</tr>\n<tr>\n<td>5th</td>\n<td>+3</td>\n<td>@Compendium[dnd5e.classfeatures.hpLNiGq7y67d2EHA]{Bardic Inspiration (d8)}, @Compendium[dnd5e.classfeatures.3VDZGs5Ug3hIE322]{Font of Inspiration}</td>\n</tr>\n<tr>\n<td>6th</td>\n<td>+3</td>\n<td>@Compendium[dnd5e.classfeatures.SEJmsjkEhdAZ90ki]{Countercharm}, Bard College feature</td>\n</tr>\n<tr>\n<td>7th</td>\n<td>+3</td>\n<td>4th Level Spell Slot</td>\n</tr>\n<tr>\n<td>8th</td>\n<td>+3</td>\n<td>@Compendium[dnd5e.classfeatures.s0Cc2zcX0JzIgam5]{Ability Score Improvement}</td>\n</tr>\n<tr>\n<td>9th</td>\n<td>+4</td>\n<td>5th Level Spell Slot @Compendium[dnd5e.classfeatures.he8RpPXwSl2lVSIk]{Song of Rest (d8)}</td>\n</tr>\n<tr>\n<td>10th</td>\n<td>+4</td>\n<td>@Compendium[dnd5e.classfeatures.hpLNiGq7y67d2EHA]{Bardic Inspiration (d10)}, @Compendium[dnd5e.classfeatures.aQLg7BWdRnm4Hr9S]{Expertise}, @Compendium[dnd5e.classfeatures.aonJ2YjkqkYB9WYB]{Magical Secrets}</td>\n</tr>\n<tr>\n<td>11th</td>\n<td>+4</td>\n<td>6th Level Spell Slot</td>\n</tr>\n<tr>\n<td>12th</td>\n<td>+4</td>\n<td>@Compendium[dnd5e.classfeatures.s0Cc2zcX0JzIgam5]{Ability Score Improvement}</td>\n</tr>\n<tr>\n<td>13th</td>\n<td>+5</td>\n<td>7th Level Spell, Slot@Compendium[dnd5e.classfeatures.he8RpPXwSl2lVSIk]{Song of Rest (d10)}</td>\n</tr>\n<tr>\n<td>14th</td>\n<td>+5</td>\n<td>@Compendium[dnd5e.classfeatures.aonJ2YjkqkYB9WYB]{Magical Secrets}, Bard College feature</td>\n</tr>\n<tr>\n<td>15th</td>\n<td>+5</td>\n<td>8th Level Spell Slot, @Compendium[dnd5e.classfeatures.hpLNiGq7y67d2EHA]{Bardic Inspiration (d12)}</td>\n</tr>\n<tr>\n<td>16th</td>\n<td>+5</td>\n<td>@Compendium[dnd5e.classfeatures.s0Cc2zcX0JzIgam5]{Ability Score Improvement}</td>\n</tr>\n<tr>\n<td>17th</td>\n<td>+6</td>\n<td>9th Level Spell Slot, @Compendium[dnd5e.classfeatures.he8RpPXwSl2lVSIk]{Song of Rest (d12)}</td>\n</tr>\n<tr>\n<td>18th</td>\n<td>+6</td>\n<td>@Compendium[dnd5e.classfeatures.aonJ2YjkqkYB9WYB]{Magical Secrets}</td>\n</tr>\n<tr>\n<td>19th</td>\n<td>+6</td>\n<td>@Compendium[dnd5e.classfeatures.s0Cc2zcX0JzIgam5]{Ability Score Improvement}</td>\n</tr>\n<tr>\n<td>20th</td>\n<td>+6</td>\n<td>@Compendium[dnd5e.classfeatures.GBYN5rH4nh1ocRlY]{Superior Inspiration}</td>\n</tr>\n</tbody>\n</table>\n<h1>Bard Colleges</h1>\n<h2>College of Lore</h2>\n<p>Bards of the College of Lore know something about most things, collecting bits of knowledge from sources as diverse as scholarly tomes and peasant tales. Whether singing folk ballads in taverns or elaborate compositions in royal courts, these bards use their gifts to hold audiences spellbound. When the applause dies down, the audience members might find themselves questioning everything they held to be true, from their faith in the priesthood of the local temple to their loyalty to the king.</p>\n<p>The loyalty of these bards lies in the pursuit of beauty and truth, not in fealty to a monarch or following the tenets of a deity. A noble who keeps such a bard as a herald or advisor knows that the bard would rather be honest than politic.</p>\n<p>The college’s members gather in libraries and sometimes in actual colleges, complete with classrooms and dormitories, to share their lore with one another. They also meet at festivals or affairs of state, where they can expose corruption, unravel lies, and poke fun at self-important figures of authority.</p>\n<h3>College of Lore Features</h3>\n<p>3rd Level: @Compendium[dnd5e.classfeatures.e9ytGikyLFgwZ5wi]{Bonus Proficiencies} @Compendium[dnd5e.classfeatures.5zPmHPQUne7RDfaU]{Cutting Words}</p>\n<p>6th Level: @Compendium[dnd5e.classfeatures.myBu3zi5eYvQIcuy]{Additional Magical Secrets}</p>\n<p>14th Level: @Compendium[dnd5e.classfeatures.pquwueEMweRhiWaq]{Peerless Skill}</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "levels": 3,
        "subclass": "College of Swords",
        "hitDice": "d8",
        "hitDiceUsed": 0,
        "saves": [
          "dex",
          "cha"
        ],
        "skills": {
          "number": 3,
          "choices": [
            "acr",
            "ani",
            "arc",
            "ath",
            "dec",
            "his",
            "ins",
            "itm",
            "inv",
            "med",
            "nat",
            "prc",
            "per",
            "prf",
            "rel",
            "slt",
            "ste",
            "sur"
          ],
          "value": []
        },
        "spellcasting": {
          "progression": "full",
          "ability": "cha"
        },
        "damage": {
          "parts": []
        },
        "attunement": 0,
        "critical": {
          "threshold": null,
          "damage": null
        }
      },
      "sort": 20001,
      "flags": {
        "core": {
          "sourceId": "Compendium.dnd5e.classes.ILvRZGEx3aXqSVUt"
        }
      },
      "img": "icons/skills/toxins/cup-goblet-poisoned-spilled.webp",
      "effects": [],
      "folder": null,
      "permission": {
        "default": 0
      }
    },
    {
      "_id": "WIEyLs9HIqwfuy50",
      "name": "Defensive Flourish",
      "type": "feat",
      "img": "icons/equipment/shield/buckler-wooden-boss-glowing-blue.webp",
      "data": {
        "description": {
          "value": "<p>You can expend one use of your Bardic Inspiration to cause the weapon to deal extra damage to the target you hit. The damage equals the number you roll on the Bardic Inspiration die. You also add the number rolled to your AC until the start of your next turn.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "activation": {
          "type": "special",
          "cost": null,
          "condition": "Bardic Inspiration"
        },
        "duration": {
          "value": 1,
          "units": "round"
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": null,
          "long": null,
          "units": ""
        },
        "uses": {
          "value": null,
          "max": "",
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "",
        "actionType": "other",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": ""
        },
        "damage": {
          "parts": [],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "requirements": "Bard 3",
        "recharge": {
          "value": null,
          "charged": false
        }
      },
      "effects": [],
      "folder": null,
      "sort": 0,
      "permission": {
        "default": 0,
        "Tyd5yiqWrRZMvG30": 3
      },
      "flags": {
        "itemacro": {
          "macro": {
            "data": {
              "_id": null,
              "name": "Defensive Flourish",
              "type": "script",
              "author": "Tyd5yiqWrRZMvG30",
              "img": "icons/svg/dice-target.svg",
              "scope": "global",
              "command": "async function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nlet actorD = game.actors.get(lastArg.actor._id);\nlet tokenD = canvas.tokens.get(lastArg.tokenId);\nlet itemD = lastArg.item;\nlet level = tokenD.actor.classes.bard.data.data.levels;\nlet numDice = 1;\nlet bardicDice = level >= 15 ? 12 : level >= 5 ? 8 : 6;\nlet itemName = \"Bardic Inspiration\";\nlet resourceKey = Object.keys(tokenD.actor.data.data.resources);\nlet resourceValue = Object.values(tokenD.actor.data.data.resources).filter(i=> i.label === itemName);\nlet resourceLabel = resourceKey[resourceValue.length -1];\nlet bardResources = tokenD.actor.data.data.resources[resourceLabel].value;\n\nif((level >= 14) && (bardResources === 0)) bardicDice = 6;\nelse if ((level < 14) && (bardResources === 0)) return ui.notifications.warn(`You are out of the required resources.`);\nelse {\n    let updates = {};\n    let data = `data.resources.${resourceLabel}.value`;\n    console.log(resourceLabel);\n    updates[data] = Math.max(0, bardResources -1);\n    await tokenD.actor.update(updates);\n}\nlet msgHistory = Object.values(MidiQOL.Workflow.workflows).filter(i => i.actor.id === actorD.id && i.workflowType === \"Workflow\" && i.item?.name != itemD.name);\nif (msgHistory.length === 0) return ui.notifications.error(`You need to successfully attack first.`);\nlet lastAttack = msgHistory[msgHistory.length - 1];\nlet target = lastAttack.hitTargets;\nlastAttack.isCritical ? numDice * 2 : numDice;\nlet damageType = lastAttack.defaultDamageType;\nlet damageRoll = new Roll(`${numDice}d${bardicDice}`).evaluate({ async: false });\ngame.dice3d?.showForRoll(damageRoll);\nnew MidiQOL.DamageOnlyWorkflow(actorD, tokenD, damageRoll.total, damageType, target, damageRoll, {flavor: `(${itemName} (${CONFIG.DND5E.damageTypes[damageType]}))`,  itemCardId: lastArg.itemCardId, useOther: true });\nlet gameRound = game.combat ? game.combat.round : 0;\nlet effectData = {\n    label: itemD.name,\n    icon: itemD.img,\n    origin: lastArg.uuid,\n    disabled: false,    \n    flags: { dae: {stackable: \"none\" } },\n    duration: { rounds: 1, startRound: gameRound, startTime: game.time.worldTime },\n    changes: [{ key: `data.attributes.ac.bonus`, mode: 2, value: `+${damageRoll.total}`, priority: 20 }]\n}\nlet effect = tokenD.actor.effects.find(i=> i.data.label === itemD.name);\nif(!effect) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tokenD.actor.uuid, effects: [effectData] });",
              "folder": null,
              "sort": 0,
              "permission": {
                "default": 0
              },
              "flags": {}
            }
          }
        },
        "magicitems": {
          "enabled": false,
          "equipped": false,
          "attuned": false,
          "charges": "0",
          "chargeType": "c1",
          "destroy": false,
          "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
          "rechargeable": false,
          "recharge": "0",
          "rechargeType": "t1",
          "rechargeUnit": "r1",
          "sorting": "l"
        },
        "midi-qol": {
          "onUseMacroName": "ItemMacro",
          "effectActivation": false
        }
      }
    },
    {
      "_id": "mvGBA2oQeKB58gsz",
      "name": "Mobile Flourish",
      "type": "feat",
      "img": "icons/skills/movement/feet-winged-boots-glowing-yellow.webp",
      "data": {
        "description": {
          "value": "<p>You can expend one use of your Bardic Inspiration to cause the weapon to deal extra damage to the target you hit. The damage equals the number you roll on the Bardic Inspiration die. You can also push the target up to 5 feet away from you, plus a number of feet equal to the number you roll on that die. You can then immediately use your reaction to move up to your walking speed to an unoccupied space within 5 feet of the target.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "activation": {
          "type": "special",
          "cost": null,
          "condition": "Bardic Inspiration"
        },
        "duration": {
          "value": null,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": null,
          "long": null,
          "units": ""
        },
        "uses": {
          "value": null,
          "max": "",
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "",
        "actionType": "util",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": ""
        },
        "damage": {
          "parts": [],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "requirements": "Bard 3",
        "recharge": {
          "value": null,
          "charged": false
        }
      },
      "effects": [],
      "folder": null,
      "sort": 0,
      "permission": {
        "default": 0,
        "Tyd5yiqWrRZMvG30": 3
      },
      "flags": {
        "magicitems": {
          "enabled": false,
          "equipped": false,
          "attuned": false,
          "charges": "0",
          "chargeType": "c1",
          "destroy": false,
          "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
          "rechargeable": false,
          "recharge": "0",
          "rechargeType": "t1",
          "rechargeUnit": "r1",
          "sorting": "l"
        },
        "midi-qol": {
          "onUseMacroName": "ItemMacro",
          "effectActivation": false
        },
        "itemacro": {
          "macro": {
            "data": {
              "_id": null,
              "name": "Mobile Flourish",
              "type": "script",
              "author": "Tyd5yiqWrRZMvG30",
              "img": "icons/svg/dice-target.svg",
              "scope": "global",
              "command": "async function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nlet actorD = game.actors.get(lastArg.actor._id);\nlet tokenD = canvas.tokens.get(lastArg.tokenId);\nlet itemD = lastArg.item;\nlet level = tokenD.actor.classes.bard.data.data.levels;\nlet numDice = 1;\nlet bardicDice = level >= 15 ? 12 : level >= 5 ? 8 : 6;\nlet itemName = \"Bardic Inspiration\";\nlet resourceKey = Object.keys(tokenD.actor.data.data.resources);\nlet resourceValue = Object.values(tokenD.actor.data.data.resources).filter(i=> i.label === itemName);\nlet resourceLabel = resourceKey[resourceValue.length -1];\nlet bardResources = tokenD.actor.data.data.resources[resourceLabel].value;\n\nif((level >= 14) && (bardResources === 0)) bardicDice = 6;\nelse if ((level < 14) && (bardResources === 0)) return ui.notifications.warn(`You are out of the required resources.`);\nelse {\n    let updates = {};\n    let data = `data.resources.${resourceLabel}.value`;\n    console.log(resourceLabel);\n    updates[data] = Math.max(0, bardResources -1);\n    await tokenD.actor.update(updates);\n}\nlet msgHistory = Object.values(MidiQOL.Workflow.workflows).filter(i => i.actor.id === actorD.id && i.workflowType === \"Workflow\" && i.item?.name != itemD.name);\nif (msgHistory.length === 0) return ui.notifications.error(`You need to successfully attack first.`);\nlet lastAttack = msgHistory[msgHistory.length - 1];\nlet target = lastAttack.hitTargets.values().next().value;\nlastAttack.isCritical ? numDice * 2 : numDice;\nlet damageType = lastAttack.defaultDamageType;\nlet damageRoll = new Roll(`${numDice}d${bardicDice}`).evaluate({ async: false });\ngame.dice3d?.showForRoll(damageRoll);\nlet knockbackDistance = Math.round((damageRoll.total+5)  / 5) * 5 || 1;\nlet itemList = \"\";\nfor(let i = 1; i <= knockbackDistance/5; i++) {    \n    itemList += `<option value=\"${i*5}\">${i*5} feet</option>`;\n}\nconsole.log(itemList);\nnew Dialog({\n\ttitle: itemD.name,\n\tcontent: `<form><p>Pick a Knockback Distance</p><div class=\"form-group\"><label for=\"knockback\">Distance</label><select id=\"knockback\">${itemList}</select></div></form>`,\n\tbuttons: {\n\t\tattack: { label: \"Attack\", callback: async (html) => {\n            let distance = html.find('#knockback')[0].value;\n            new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, damageRoll.total, damageType, [target], damageRoll, { flavor: `(${itemName} (${CONFIG.DND5E.damageTypes[damageType]}))`, itemCardId: lastArg.itemCardId, useOther: true});\n            knockback(tokenD,target,distance);\n        }\n    }\n},\ndefault: \"attack\"\n}).render(true);\n\nasync function knockback(ptoken,ttoken,distance){\n    const x1 = ptoken.center.x;\n    const x2 = ttoken.center.x;\n    const y1 = ptoken.center.y;\n    const y2 = ttoken.center.y;\n    let angcoeff = Math.abs((y2-y1)/(x2-x1));\n    if(angcoeff > 1) angcoeff = 1/angcoeff;\n    const unitDistance = distance+(distance*Math.sqrt(2)-distance)*angcoeff;\n    const gridUnit = canvas.scene.data.grid;\n    console.log(angcoeff,unitDistance);\n    distance = (distance*canvas.scene.data.grid)/canvas.scene.data.gridDistance;\n\n    async function getXy(x){\n\n        return (y2-y1)*(x-x1)/(x2-x1)+y1;\n\n    }\n\n    async function findDestination(){\n\n        const scenew = canvas.dimensions.width;\n        let coordinatesArray = [];\n        for (let i = 0; i <= scenew; i+=1){\n            \n            let ty = await getXy(i);\n            let snapCoord = await canvas.grid.getCenter(i, ty);\n            let cdist = await canvas.grid.measureDistance({\"x\" : snapCoord[0],\"y\" : snapCoord[1]}, ttoken.center);\n            if(await canvas.grid.measureDistance({\"x\" : snapCoord[0],\"y\" : snapCoord[1]}, ptoken.center)>await canvas.grid.measureDistance(ttoken.center, ptoken.center) && await canvas.grid.measureDistance({\"x\" : snapCoord[0],\"y\" : snapCoord[1]}, ptoken.center) > unitDistance){\n                coordinatesArray.push({\"x\" : i,\"y\" : ty, \"dist\" : cdist});\n            }\n            \n        }\n            return coordinatesArray;\n\n    }\n    if(ptoken.center.x == ttoken.center.x){\n\n        if(ptoken.center.y - ttoken.center.y > 0){\n            await updateKB({\"y\": ttoken.data.y-distance,\"x\": ttoken.data.x},{\"x\": ttoken.center.x,\"y\": ttoken.center.y-distance})\n        }\n        else{\n            await updateKB({\"y\": ttoken.data.y+distance,\"x\": ttoken.data.x},{\"x\": ttoken.center.x,\"y\": ttoken.center.y+distance})\n        }\n\n    }\n    else if (ptoken.center.y == ttoken.center.y){\n\n        if(ptoken.center.x - ttoken.center.x > 0){\n            await updateKB({\"x\": ttoken.data.x-distance,\"y\": ttoken.data.y},{\"x\": ttoken.center.x-distance,\"y\": ttoken.center.y})\n        }\n        else{\n            await updateKB({\"x\": ttoken.data.x+distance,\"y\": ttoken.data.y},{\"x\": ttoken.center.x+distance,\"y\": ttoken.center.y})\n        }\n\n    }\n    else{\n\n        let fdest = await findDestination();\n        let coord = fdest.reduce(function(prev, curr) {\n            return (Math.abs(curr.dist - unitDistance) < Math.abs(prev.dist - unitDistance) ? curr : prev);\n          });\n        fdest = await canvas.grid.getSnappedPosition(coord.x-gridUnit/2, coord.y-gridUnit/2, 1);\n        await updateKB(fdest);\n        \n\n    }\n    async function updateKB(center,originalcenter){\n        if(originalcenter){\n            if(await ttoken.checkCollision(originalcenter)){\n                if(knockDist <= 5) return;\n                knockDist-=5;\n                await knockback(pusher,pushed,knockDist);\n            }\n            else{\n            await ttoken.update(center);\n            }\n        }\n        else{\n            if(await ttoken.checkCollision(center)){\n                if(knockDist <= 5) return;\n                knockDist-=5;\n                await knockback(pusher,pushed,knockDist);\n            }\n            else{\n            await ttoken.update(center);\n            }\n        }\n    }\n}",
              "folder": null,
              "sort": 0,
              "permission": {
                "default": 0
              },
              "flags": {}
            }
          }
        }
      }
    },
    {
      "_id": "mpKNfdFWFOcLl8BP",
      "name": "Slashing Flourish",
      "type": "feat",
      "img": "icons/skills/melee/maneuver-sword-katana-yellow.webp",
      "data": {
        "description": {
          "value": "<p>You can expend one use of your Bardic Inspiration to cause the weapon to deal extra damage to the target you hit and to any other creature of your choice that you can see within 5 feet of you. The damage equals the number you roll on the Bardic Inspiration die.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "activation": {
          "type": "special",
          "cost": null,
          "condition": "Bardic Inspiration"
        },
        "duration": {
          "value": null,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": null,
          "long": null,
          "units": ""
        },
        "uses": {
          "value": null,
          "max": "",
          "per": ""
        },
        "consume": {
          "type": "",
          "target": "",
          "amount": null
        },
        "ability": "",
        "actionType": "util",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": ""
        },
        "damage": {
          "parts": [],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "requirements": "Bard 3",
        "recharge": {
          "value": null,
          "charged": false
        }
      },
      "effects": [],
      "folder": null,
      "sort": 0,
      "permission": {
        "default": 0,
        "Tyd5yiqWrRZMvG30": 3
      },
      "flags": {
        "magicitems": {
          "enabled": false,
          "equipped": false,
          "attuned": false,
          "charges": "0",
          "chargeType": "c1",
          "destroy": false,
          "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
          "rechargeable": false,
          "recharge": "0",
          "rechargeType": "t1",
          "rechargeUnit": "r1",
          "sorting": "l"
        },
        "midi-qol": {
          "onUseMacroName": "ItemMacro",
          "effectActivation": false
        },
        "itemacro": {
          "macro": {
            "data": {
              "_id": null,
              "name": "Slashing Flourish",
              "type": "script",
              "author": "Tyd5yiqWrRZMvG30",
              "img": "icons/svg/dice-target.svg",
              "scope": "global",
              "command": "async function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nconst lastArg = args[args.length - 1];\nlet actorD = game.actors.get(lastArg.actor._id);\nlet tokenD = canvas.tokens.get(lastArg.tokenId);\nlet itemD = lastArg.item;\nconsole.log(itemD);\nlet level = tokenD.actor.classes.bard.data.data.levels;\nlet numDice = 1;\nlet bardicDice = level >= 15 ? 12 : level >= 5 ? 8 : 6;\nlet itemName = \"Bardic Inspiration\";\nlet resourceKey = Object.keys(tokenD.actor.data.data.resources);\nlet resourceValue = Object.values(tokenD.actor.data.data.resources).filter(i=> i.label === itemName);\nlet resourceLabel = resourceKey[resourceValue.length -1];\nlet bardResources = tokenD.actor.data.data.resources[resourceLabel].value;\nif((level >= 14) && (bardResources === 0)) bardicDice = 6;\nelse if ((level < 14) && (bardResources === 0)) return ui.notifications.warn(`You are out of the required resources.`);\nelse {\n    let updates = {};\n    let data = `data.resources.${resourceLabel}.value`;\n    console.log(resourceLabel);\n    updates[data] = Math.max(0, bardResources -1);\n    await tokenD.actor.update(updates);\n}\nlet msgHistory = Object.values(MidiQOL.Workflow.workflows).filter(i => i.actor.id === actorD.id && i.workflowType === \"Workflow\" && i.item?.name != itemD.name);\nif (msgHistory.length === 0) return ui.notifications.error(`You need to successfully attack first.`);\nlet lastAttack = msgHistory[msgHistory.length - 1];\nlet originTarget = lastAttack.hitTargets.values().next().value;\nlet weaponDistance = lastAttack.item.data.data.range.value;\nconsole.log(originTarget);\nlastAttack.isCritical ? numDice * 2 : numDice;\nlet damageType = lastAttack.defaultDamageType;\nlet damageRoll = new Roll(`${numDice}d${bardicDice}`).evaluate({ async: false });\ngame.dice3d?.showForRoll(damageRoll);\nawait new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, damageRoll.total, damageType, [originTarget], damageRoll, { flavor: `(${itemName} (${CONFIG.DND5E.damageTypes[damageType]}))`, itemCardId: lastArg.itemCardId, useOther: true });\nlet distance = canvas.grid.measureDistance(tokenD, originTarget) + weaponDistance;\nconsole.log(distance);\nlet nearbyTargets = canvas.tokens.placeables.filter(target => (canvas.grid.measureDistance(tokenD, target) <= distance && target.id != tokenD.id && originTarget.id != target.id && target.data.disposition === originTarget.data.disposition));\nconsole.log(nearbyTargets);\nif (nearbyTargets.length === 0) return {};\nlet target_list = \"\";\nfor (let target of nearbyTargets) {\n    target_list += `<option value=\"${target.id}\">${target.name}</option>`;\n}\nnew Dialog({\n    title: itemD.name,\n    content: `<p>Pick a secondary target</p><form><div class=\"form-group\"><select id=\"hitTarget\">${target_list}</select></div></form>`,\n    buttons: {\n        attack: {\n            label: \"Confirmed\", callback: async (html) => {\n                let target_id = html.find('#hitTarget')[0].value;\n                let find_target = canvas.tokens.get(target_id);\n                let newDamage = lastAttack.isCritical ? Math.floor(damageRoll.total / 2) : damageRoll.total;\n                let secondaryDamage = new Roll(`${newDamage}`).evaluate({ async: false });\n                game.dice3d?.showForRoll(secondaryDamage);\n                new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, secondaryDamage.total, damageType, [find_target], secondaryDamage, { flavor: `(${itemName} (${CONFIG.DND5E.damageTypes[damageType]}))`, itemData: itemD, itemCardId: \"new\" });\n            }\n        }\n    },\n    default: \"attack\"\n}).render(true);",
              "folder": null,
              "sort": 0,
              "permission": {
                "default": 0
              },
              "flags": {}
            }
          }
        }
      }
    },
    {
      "_id": "qK4F9clRQlBrOYfU",
      "name": "Blade Flourish",
      "type": "feat",
      "img": "icons/skills/melee/sword-winged-holy-orange.webp",
      "data": {
        "description": {
          "value": "<p>Whenever you take the Attack action on your turn, your walking speed increases by 10 feet until the end of the turn, and if a weapon attack that you make as part of this action hits a creature, you can use one of the following Blade Flourish options of your choice. You can use only one Blade Flourish option per turn.</p>",
          "chat": "",
          "unidentified": ""
        },
        "source": "",
        "activation": {
          "type": "",
          "cost": 0,
          "condition": ""
        },
        "duration": {
          "value": null,
          "units": ""
        },
        "target": {
          "value": null,
          "width": null,
          "units": "",
          "type": ""
        },
        "range": {
          "value": null,
          "long": null,
          "units": ""
        },
        "uses": {
          "value": null,
          "max": "",
          "per": null
        },
        "consume": {
          "type": "",
          "target": null,
          "amount": null
        },
        "ability": null,
        "actionType": "",
        "attackBonus": 0,
        "chatFlavor": "",
        "critical": {
          "threshold": null,
          "damage": ""
        },
        "damage": {
          "parts": [],
          "versatile": ""
        },
        "formula": "",
        "save": {
          "ability": "",
          "dc": null,
          "scaling": "spell"
        },
        "requirements": "Bard 3",
        "recharge": {
          "value": null,
          "charged": false
        }
      },
      "effects": [
        {
          "_id": "kVYAZBn1fLkCocKT",
          "changes": [
            {
              "key": "flags.dnd5e.DamageBonusMacro",
              "mode": 0,
              "value": "ItemMacro.Blade Flourish",
              "priority": "20"
            }
          ],
          "disabled": false,
          "duration": {
            "startTime": null
          },
          "icon": "icons/skills/melee/sword-winged-holy-orange.webp",
          "label": "Blade Flourish",
          "transfer": true,
          "flags": {
            "dae": {
              "stackable": "none",
              "macroRepeat": "none",
              "specialDuration": [],
              "transfer": true
            },
            "dnd5e-helpers": {
              "rest-effect": "Ignore"
            },
            "ActiveAuras": {
              "isAura": false,
              "aura": "None",
              "radius": null,
              "alignment": "",
              "type": "",
              "ignoreSelf": false,
              "height": false,
              "hidden": false,
              "hostile": false,
              "onlyOnce": false
            }
          },
          "tint": null,
          "selectedKey": "flags.dnd5e.DamageBonusMacro"
        }
      ],
      "folder": null,
      "sort": -1503148,
      "permission": {
        "default": 0,
        "Tyd5yiqWrRZMvG30": 3
      },
      "flags": {
        "magicitems": {
          "enabled": false,
          "equipped": false,
          "attuned": false,
          "charges": "0",
          "chargeType": "c1",
          "destroy": false,
          "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
          "rechargeable": false,
          "recharge": "0",
          "rechargeType": "t1",
          "rechargeUnit": "r1",
          "sorting": "l"
        },
        "itemacro": {
          "macro": {
            "data": {
              "_id": null,
              "name": "Blade Flourish",
              "type": "script",
              "author": "Tyd5yiqWrRZMvG30",
              "img": "icons/svg/dice-target.svg",
              "scope": "global",
              "command": "if (args[0].tag === \"DamageBonus\") {\n    let tokenD = canvas.tokens.get(args[0].tokenId);\n    if (![\"ak\"].some(actionType => (args[0].item.data.actionType || \"\").includes(actionType))) return {};\n    let gameRound = game.combat ? game.combat.round : 0;\n    let effectData = [{\n        changes: [{ key: \"data.attributes.movement.walk\", mode: 2, value: \"+10\", priority: 20 }],\n        disabled: false,\n        flags: { dae: {stackable: \"none\" } },\n        duration: { turns: 1, startRound: gameRound, startTime: game.time.worldTime },\n        icon: \"icons/skills/movement/feet-winged-boots-blue.webp\",\n        label: \"Blade Flourish Movement\"\n    }];\n    let effect = tokenD.actor.effects.find(i=> i.data.label === \"Blade Flourish Movement\");\n    if(!effect) await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: tokenD.actor.uuid, effects: effectData }); \n}",
              "folder": null,
              "sort": 0,
              "permission": {
                "default": 0
              },
              "flags": {}
            }
          }
        },
        "core": {
          "sourceId": "Item.5DbijRqXkl2UDHqb"
        }
      },
      "changes": []
    }
  ],
  "effects": [
    {
      "_id": "Dw4MqMFEa1xK4z4V",
      "changes": [
        {
          "key": "flags.dnd5e.DamageBonusMacro",
          "mode": 0,
          "value": "ItemMacro.Blade Flourish",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": 36618893201,
        "startRound": 5,
        "startTurn": 1
      },
      "icon": "icons/skills/melee/sword-winged-holy-orange.webp",
      "label": "Blade Flourish",
      "origin": "Actor.KPY7I7vcC88Zdk8d.Item.qK4F9clRQlBrOYfU",
      "tint": null,
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": true
        },
        "dnd5e-helpers": {
          "rest-effect": "Ignore"
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      }
    },
    {
      "_id": "laXwYWIZY73pNYGt",
      "changes": [
        {
          "key": "data.attributes.movement.walk",
          "mode": 2,
          "value": "+10",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "turns": 1,
        "startRound": 1,
        "startTime": 36618919206,
        "startTurn": 0
      },
      "icon": "icons/skills/movement/feet-winged-boots-blue.webp",
      "label": "Blade Flourish Movement",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "transfer": true
        }
      }
    },
    {
      "_id": "oGt9RJuCvZrBILtw",
      "changes": [
        {
          "key": "data.attributes.ac.bonus",
          "mode": 2,
          "value": "+5",
          "priority": 20
        }
      ],
      "disabled": false,
      "duration": {
        "rounds": 1,
        "startRound": 1,
        "startTime": 36618923518,
        "startTurn": 3
      },
      "icon": "icons/equipment/shield/buckler-wooden-boss-glowing-blue.webp",
      "label": "Defensive Flourish",
      "origin": "Actor.KPY7I7vcC88Zdk8d.Item.WIEyLs9HIqwfuy50",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "transfer": true
        }
      }
    }
  ],
  "sort": 0,
  "flags": {
    "core": {
      "sourceId": "Compendium.dnd5e.heroes.BnukfoG210lqJ9a2",
      "sheetClass": ""
    },
    "dae": {
      "damageApplied": -4
    },
    "midi-qol": {},
    "tidy5e-sheet": {},
    "exportSource": {
      "world": "darklands",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.3"
    }
  }
}