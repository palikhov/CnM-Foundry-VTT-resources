{
  "name": "Channel Divinity: Twilight Sanctuary",
  "type": "feat",
  "img": "icons/magic/unholy/orb-glowing-purple.webp",
  "data": {
    "description": {
      "value": "<p>At 2nd level, you can use your Channel Divinity to refresh your allies with soothing twilight.</p>\n<p>As an action, you present your holy symbol, and a sphere of twilight emanates from you. The sphere is centered on you, has a 30-foot radius, and is filled with dim light. The sphere moves with you, and it lasts for 1 minute or until you are incapacitated or die. Whenever a creature (including you) ends its turn in the sphere, you can grant that creature one of these benefits:</p>\n<ul>\n<li>You grant it temporary hit points equal to 1d6 plus your cleric level.</li>\n</ul>\n<ul>\n<li>You end one effect on it causing it to be charmed or frightened.</li>\n</ul>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "action",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "1",
      "per": "lr"
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": null,
    "actionType": "",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "Cleric 2",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [
    {
      "_id": "1hqx1DYQOHgMTize",
      "changes": [
        {
          "key": "macro.itemMacro",
          "mode": 0,
          "value": "",
          "priority": "20"
        }
      ],
      "disabled": false,
      "duration": {
        "startTime": null
      },
      "icon": "icons/magic/unholy/orb-glowing-purple.webp",
      "label": "Twilight Sanctuary",
      "transfer": false,
      "flags": {
        "dae": {
          "stackable": "none",
          "macroRepeat": "none",
          "specialDuration": [],
          "transfer": false
        },
        "ActiveAuras": {
          "isAura": false,
          "aura": "None",
          "radius": null,
          "alignment": "",
          "type": "",
          "ignoreSelf": false,
          "height": false,
          "hidden": false,
          "hostile": false,
          "onlyOnce": false
        }
      },
      "tint": null,
      "selectedKey": "macro.itemMacro"
    }
  ],
  "sort": 0,
  "flags": {
    "magicitems": {
      "enabled": false,
      "equipped": false,
      "attuned": false,
      "charges": "0",
      "chargeType": "c1",
      "destroy": false,
      "destroyFlavorText": "reaches 0 charges: it crumbles into ashes and is destroyed.",
      "rechargeable": false,
      "recharge": "0",
      "rechargeType": "t1",
      "rechargeUnit": "r1",
      "sorting": "l"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Channel Divinity: Twilight Sanctuary",
          "type": "script",
          "author": "Tyd5yiqWrRZMvG30",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "async function wait(ms) {return new Promise(resolve => {setTimeout(resolve, ms);});}\n (async()=>{\nconst lastArg = args[args.length - 1];\nconst tokenD = canvas.tokens.get(lastArg.tokenId);\nconst itemD = lastArg.efData.flags.dae.itemData;\n\nasync function combatRound(combat, update) {\n    console.log(update);\n    if (!(\"round\" in update || \"turn\" in update)) return;\n    let distance = 30;\n    let target = await canvas.tokens.get(game.combat.previous.tokenId);\n    let visible = await canvas.grid.measureDistance(tokenD.center, target.center) <= distance && tokenD.data.disposition === target.data.disposition && !canvas.walls.checkCollision(new Ray(tokenD.center, target.center));\n    if (!visible) return {};\n    await target.setTarget(true, {releaseOthers: true});\n    let item = await tokenD.actor.data.items.find(i => i.name === \"Soothing Twilight\");\n    if (item) await item.roll();\n}\n\nif (args[0] === \"on\") {\n    let hookId = Hooks.on(\"updateCombat\", combatRound);\n    DAE.setFlag(tokenD.actor, \"twilightEffect\", hookId);\n    let itemData = [{\n  \"name\": \"Soothing Twilight\",\n  \"type\": \"feat\",\n  \"img\": \"icons/magic/unholy/barrier-shield-glowing-pink.webp\",\n  \"data\": {\n    \"description\": {\n      \"value\": \"<p>Whenever a creature (including you) ends its turn in the sphere, you can grant that creature one of these benefits:</p>\\n<ul>\\n<li>You grant it temporary hit points equal to 1d6 plus your cleric level.</li>\\n</ul>\\n<ul>\\n<li>You end one effect on it causing it to be charmed or frightened.</li>\\n</ul>\",\n      \"chat\": \"\",\n      \"unidentified\": \"\"\n    },\n    \"source\": \"\",\n    \"activation\": {\n      \"type\": \"special\",\n      \"cost\": null,\n      \"condition\": \"\"\n    },\n    \"duration\": {\n      \"value\": null,\n      \"units\": \"\"\n    },\n    \"target\": {\n      \"value\": null,\n      \"width\": null,\n      \"units\": \"\",\n      \"type\": \"\"\n    },\n    \"range\": {\n      \"value\": null,\n      \"long\": null,\n      \"units\": \"\"\n    },\n    \"uses\": {\n      \"value\": 0,\n      \"max\": \"0\",\n      \"per\": \"\"\n    },\n    \"consume\": {\n      \"type\": \"\",\n      \"target\": \"\",\n      \"amount\": null\n    },\n    \"ability\": \"\",\n    \"actionType\": \"util\",\n    \"attackBonus\": 0,\n    \"chatFlavor\": \"\",\n    \"critical\": null,\n    \"damage\": {\n      \"parts\": [],\n      \"versatile\": \"\"\n    },\n    \"formula\": \"\",\n    \"save\": {\n      \"ability\": \"\",\n      \"dc\": null,\n      \"scaling\": \"spell\"\n    },\n    \"requirements\": \"\",\n    \"recharge\": {\n      \"value\": null,\n      \"charged\": false\n    }\n  },\n  \"effects\": [],\n  \"sort\": 0,\n  \"flags\": {\n    \"magicitems\": {\n      \"enabled\": false,\n      \"equipped\": false,\n      \"attuned\": false,\n      \"charges\": \"0\",\n      \"chargeType\": \"c1\",\n      \"destroy\": false,\n      \"destroyFlavorText\": \"reaches 0 charges: it crumbles into ashes and is destroyed.\",\n      \"rechargeable\": false,\n      \"recharge\": \"0\",\n      \"rechargeType\": \"t1\",\n      \"rechargeUnit\": \"r1\",\n      \"sorting\": \"l\"\n    },\n    \"midi-qol\": {\n      \"onUseMacroName\": \"ItemMacro\"\n    },\n    \"itemacro\": {\n      \"macro\": {\n        \"data\": {\n          \"_id\": null,\n          \"name\": \"Soothing Twilight\",\n          \"type\": \"script\",\n          \"author\": \"Tyd5yiqWrRZMvG30\",\n          \"img\": \"icons/svg/dice-target.svg\",\n          \"scope\": \"global\",\n          \"command\": \"const actorD = game.actors.get(args[0].actor._id);\\nconst tokenD = canvas.tokens.get(args[0].tokenId);\\nconst itemD = args[0].item;\\nconst target = canvas.tokens.get(args[0].targets[0].id);\\nasync function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\\nnew Dialog({\\n    title: `${itemD.name} : Choose an Effect`,\\n    content: `\\n    <div style=\\\"padding:10px;\\\">\\n    <div style=\\\"float:left;padding:0px 10px;\\\"><img src=\\\"${target.data.img}\\\" height=\\\"30\\\" width=\\\"30\\\"></div>\\n    <div>\\n    <div><b>Target:</b> ${target.name}</div><div><b>Current Temp HP:</b> ${target.actor.data.data.attributes.hp.temp != null ? target.actor.data.data.attributes.hp.temp : 0}</div>\\n     </div>\\n    </div>`,\\n    buttons: {\\n        heal: {\\n            label: \\\"Heal\\\", callback: async () => {\\n                let damageType = \\\"temphp\\\";\\n                let damageRoll = new Roll('1d6 + @classes.cleric.levels', actorD.getRollData()).evaluate({ async: false });\\n                new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, damageRoll.total, damageType, [target], damageRoll, { flavor: `(${CONFIG.DND5E.healingTypes[damageType]})`, itemCardId: args[0].itemCardId, useOther: false });\\n            }\\n        },\\n        cure: {\\n            label: \\\"Cure\\\", callback: async () => {\\n                let condition_list = [\\\"Charmed\\\", \\\"Frightened\\\"];\\n                let effect = target.actor.effects.filter(i => condition_list.includes(i.data.label));\\n                let selectOptions = \\\"\\\";\\n                for (let i = 0; i < effect.length; i++) {\\n                    let condition = effect[i].data.label;\\n                    selectOptions += `<option value=\\\"${condition}\\\">${condition}</option>`;\\n                }\\n                if (selectOptions === \\\"\\\") {\\n                    return ui.notifications.warn(`There's nothing to Cure on ${target.name}.`);\\n                } else {\\n                    let content_cure = `<p>Choose a Condition Cure</p><form class=\\\"flexcol\\\"><div class=\\\"form-group\\\"><select id=\\\"element\\\">${selectOptions}</select></div></form>`;\\n                    new Dialog({\\n                        title: itemD.name,\\n                        content: content_cure,\\n                        buttons: {\\n                            cure: {\\n                                icon: '<i class=\\\"fas fa-check\\\"></i>',\\n                                label: 'Cure!',\\n                                callback: async (html) => {\\n                                    let element = html.find('#element').val();\\n                                    let effect = target.actor.effects.find(i=> i.data.label === element);\\n                                    if (effect) await MidiQOL.socket().executeAsGM(\\\"removeEffects\\\", {actorUuid: target.actor.uuid, effects:[effect.id]});\\n                                    let chatContent = `<div class=\\\"midi-qol-nobox\\\"><div class=\\\"midi-qol-flex-container\\\"><div>Cures ${element}:</div><div class=\\\"midi-qol-target-npc midi-qol-target-name\\\" id=\\\"${target.id}\\\"> ${target.name}</div><div><img src=\\\"${target.data.img}\\\" width=\\\"30\\\" height=\\\"30\\\" style=\\\"border:0px\\\"></img></div></div></div>`;\\n                                    await wait(500);\\n                                    const chatMessage = game.messages.get(args[0].itemCardId);\\n                                    let content = duplicate(chatMessage.data.content);\\n                                    const searchString = /<div class=\\\"midi-qol-hits-display\\\">[\\\\s\\\\S]*<div class=\\\"end-midi-qol-hits-display\\\">/g;\\n                                    const replaceString = `<div class=\\\"midi-qol-hits-display\\\"><div class=\\\"end-midi-qol-hits-display\\\">${chatContent}`;\\n                                    content = content.replace(searchString, replaceString);\\n                                    chatMessage.update({ content: content });\\n                                }\\n                            }\\n                        },\\n                        default: \\\"cure\\\",\\n                    }).render(true);\\n                }\\n            }\\n        }},\\n        default: \\\"heal\\\"\\n}).render(true);\",\n          \"folder\": null,\n          \"sort\": 0,\n          \"permission\": {\n            \"default\": 0\n          },\n          \"flags\": {}\n        }\n      }\n    },\n    \"core\": {\n      \"sourceId\": \"Item.BWZwQVivoD4oiflc\"\n    },\n    \"exportSource\": {\n      \"world\": \"darklands\",\n      \"system\": \"dnd5e\",\n      \"coreVersion\": \"0.8.8\",\n      \"systemVersion\": \"1.4.1\"\n    }\n  }\n}];\n    let item = tokenD.actor.items.find(i => i.name === \"Soothing Twilight\");\n    if(!item) await tokenD.actor.createEmbeddedDocuments(\"Item\", itemData);\n}\n\nif (args[0] === \"off\") {\n    let hookId = DAE.getFlag(tokenD.actor, \"twilightEffect\");\n    if(hookId) Hooks.off(\"updateCombat\", hookId);\n    if(hookId) await DAE.unsetFlag(tokenD.actor, \"twilightEffect\");\n    let item = tokenD.actor.items.find(i => i.name === \"Soothing Twilight\");\n    if(item) await tokenD.actor.deleteEmbeddedDocuments('Item', [item.id]);\n}\n})();",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "core": {
      "sourceId": "Item.2cCaIxxPXmNzWSKb"
    },
    "exportSource": {
      "world": "darklands",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.4.2"
    }
  }
}