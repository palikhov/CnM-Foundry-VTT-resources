{
  "name": "Hail of Thorns",
  "type": "spell",
  "img": "systems/dnd5e/icons/spells/needles-acid-1.jpg",
  "data": {
    "description": {
      "value": "<p>The next time you hit a creature with a ranged weapon attack before the spell ends, this spell creates a rain of thorns that sprouts from your ranged weapon or ammunition. In addition to the normal effect of the attack, the target of the attack and each creature within 5 feet of it must make a Dexterity saving throw. A creature takes 1d10 piercing damage on a failed save, or half as much damage on a successful one.</p>\n<p><strong>At Higher Levels.</strong> If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d10 for each slot level above 1st (to a maximum of 6d10).</p>",
      "chat": "<p>The next time you hit a creature with a ranged weapon attack before the spell ends, this spell creates a rain of thorns that sprouts from your ranged weapon or ammunition. In addition to the normal effect of the attack, the target of the attack and each creature within 5 feet of it must make a Dexterity saving throw. A creature takes 1d10 piercing damage on a failed save, or half as much damage on a successful one.</p>\n<p><strong>At Higher Levels.</strong> If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d10 for each slot level above 1st (to a maximum of 6d10).</p>",
      "unidentified": ""
    },
    "source": "Player's Handbook pg 249",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": 1,
      "units": "minute"
    },
    "target": {
      "value": null,
      "width": null,
      "units": "",
      "type": "self"
    },
    "range": {
      "value": null,
      "long": null,
      "units": "self"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": {
      "threshold": null,
      "damage": null
    },
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "level": 1,
    "school": "con",
    "components": {
      "value": "",
      "vocal": true,
      "somatic": false,
      "material": false,
      "ritual": false,
      "concentration": false
    },
    "materials": {
      "value": "",
      "consumed": false,
      "cost": 0,
      "supply": 0
    },
    "preparation": {
      "mode": "prepared",
      "prepared": true
    },
    "scaling": {
      "mode": "level",
      "formula": "1d10"
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "ddbimporter": {
      "id": 138029,
      "definitionId": 2316,
      "entityTypeId": 435869154,
      "dndbeyond": {
        "lookup": "generic",
        "lookupName": "generic",
        "level": null,
        "castAtLevel": null
      },
      "sources": [
        {
          "sourceId": 2,
          "pageNumber": 249,
          "sourceType": 1
        }
      ],
      "tags": [
        "Damage"
      ]
    },
    "betterRolls5e": {
      "quickVersatile": {
        "altValue": true
      },
      "quickCharges": {
        "value": {
          "use": true,
          "resource": true
        },
        "altValue": {
          "use": true,
          "resource": true
        }
      }
    },
    "core": {
      "sourceId": "Compendium.world.ddb-darklands-spells.bIuOPiuw2UxKT4Mj"
    },
    "favtab": {
      "isFavorite": true
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Hail of Thorns",
          "type": "script",
          "author": "Tyd5yiqWrRZMvG30",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "async function wait(ms) { return new Promise(resolve => { setTimeout(resolve, ms); }); }\nif (args[0].hitTargets.length === 0) return;\nif (args[0].tag === \"OnUse\") {\n    let actorD = canvas.tokens.get(args[0].tokenId).actor;\n    let spellLevel = args[0].spellLevel;\n    let gameRound = game.combat ? game.combat.round : 0;\n    const effectData = {\n        changes: [\n            { key: \"flags.midi-qol.hailfofThorns\", mode: 5, value: spellLevel, priority: 20 },\n            { key: \"flags.dnd5e.DamageBonusMacro\", mode: 0, value: `ItemMacro.${args[0].item.name}`, priority: 20 }\n        ],\n        origin: args[0].itemUuid,\n        disabled: false,\n        duration: { rounds: 10, seconds: 60, startRound: gameRound, startTime: game.time.worldTime },\n        icon: args[0].item.img,\n        label: args[0].item.name\n    }\n    await actorD.createEmbeddedDocuments(\"ActiveEffect\", [effectData]);\n} else if (args[0].tag === \"DamageBonus\") {\n    if (![\"rwak\"].includes(args[0].item.data.actionType)) return {};\n    let itemD = args[0].actor.items.getName(\"Hail of Thorns\");\n    let effect = args[0].actor.effects.find(i => i.data.label === itemD.name);\n    if (!effect) return {};\n    let mainTarget = canvas.tokens.get(args[0].hitTargets[0].id);\n    let numDice = getProperty(args[0].actor.flags, \"midi-qol.hailfofThorns\");\n    let damageRoll = new Roll(`${numDice}d10`).evaluate({ async: false });\n    let fullDamage = damageRoll.total;\n    let halfDamage = Math.ceil(damageRoll.total / 2);\n    let DC = args[0].actor.data.attributes.spelldc;\n    let success = \"fails\";\n    let saveType = \"dex\";\n    let distance = 9.5;\n    let saveResult = [];\n    let halfDamageTargets = [];\n    let fullDamageTargets = [];\n    let workflow = await MidiQOL.Workflow.getWorkflow(itemD.uuid);\n    let itemCard = await MidiQOL.showItemInfo.bind(workflow.item)();\n    let getTargets = await canvas.tokens.placeables.filter(target => (canvas.grid.measureDistance(mainTarget.center, target.center) <= distance && !canvas.walls.checkCollision(new Ray(mainTarget.center, target.center))));\n    for (let targeted of getTargets) {\n        let target = canvas.tokens.get(targeted.id);\n        let save = await target.actor.rollAbilitySave(saveType, { chatMessage: false, fastForward: true });\n        if (save.total >= DC) {\n            saveResult.push(`<div class=\"midi-qol-flex-container\">            \n            <div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\">${target.name} saves ${save.total} <span style=\"color:red;\">${halfDamage}</span></div>            \n            <img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\">            \n            </div>`);\n            halfDamageTargets.push(target);\n        } else {\n            saveResult.push(`<div class=\"midi-qol-flex-container\">\n            <div class=\"midi-qol-target-npc midi-qol-target-name\" id=\"${target.id}\">${target.name} fails ${save.total} <span style=\"color:red;\">${fullDamage}</span></div>\n            <img src=\"${target.data.img}\" width=\"30\" height=\"30\" style=\"border:0px\">\n            </div>`);\n            fullDamageTargets.push(target);\n        }\n    }\n    await MidiQOL.applyTokenDamage([{ damage: halfDamage, type: \"piercing\" }], halfDamage, new Set(halfDamageTargets), itemD.name, new Set());\n    await MidiQOL.applyTokenDamage([{ damage: fullDamage, type: \"piercing\" }], fullDamage, new Set(fullDamageTargets), itemD.name, new Set());\n    await wait(800);\n    await targetList(saveResult, itemCard, saveType, DC);\n    await damageRolled(damageRoll, itemCard);\n    if (effect) await canvas.tokens.get(args[0].tokenId).actor.deleteEmbeddedDocuments(\"ActiveEffect\", [effect.id]);\n    await ui.chat.scrollBottom();\n}\n\nasync function targetList(saveResult, itemCard, saveType, DC) {\n    let save_list = saveResult.join('');\n    let save_results = `<div class=\"midi-qol-nobox midi-qol-bigger-text\">${CONFIG.DND5E.abilities[saveType]} Saving Throw: DC ${DC}</div><div class=\"midi-qol-nobox\">${save_list}</div>`;\n    let chatMessage = await game.messages.get(itemCard.id);\n    let content = await duplicate(chatMessage.data.content);\n    let searchString = /<div class=\"midi-qol-other-roll\">[\\s\\S]*<div class=\"end-midi-qol-other-roll\">/g;\n    let replaceString = `<div class=\"midi-qol-other-roll\"><div class=\"end-midi-qol-other-roll\">${save_results}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n}\n\nasync function damageRolled(damageRoll, itemCard) {\nlet damage_results = `\n<div class=\"dice-roll\">\n    <div class=\"dice-result\">\n        <div class=\"dice-formula\">${damageRoll.formula}</div>\n        <div class=\"dice-tooltip\">\n            <section class=\"tooltip-part\">\n            <div class=\"dice\">\n                <header class=\"part-header flexrow\">\n                    <span class=\"part-formula\">${damageRoll.formula}</span>\n                    <span class=\"part-total\">${damageRoll.total}</span>\n                </header>\n                <ol class=\"dice-rolls\">\n                    <li class=\"roll die d10\">${damageRoll.total}</li>\n                </ol>\n            </div>\n            </section>\n        </div>\n        <h4 class=\"dice-total\">${damageRoll.total}</h4>\n    </div>\n</div>`;\n    let chatMessage = await game.messages.get(itemCard.id);\n    let content = await duplicate(chatMessage.data.content);\n    let searchString = /<div class=\"midi-qol-damage-roll\">[\\s\\S]*<div class=\"end-midi-qol-damage-roll\">/g;\n    let replaceString = `<div class=\"midi-qol-damage-roll\"><div class=\"end-midi-qol-damage-roll\">${damage_results}`;\n    content = await content.replace(searchString, replaceString);\n    await chatMessage.update({ content: content });\n}",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "exportSource": {
      "world": "darklands",
      "system": "dnd5e",
      "coreVersion": "0.8.9",
      "systemVersion": "1.5.2"
    }
  }
}