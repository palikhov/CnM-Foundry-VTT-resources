{
  "name": "Healing Light",
  "type": "feat",
  "img": "systems/dnd5e/icons/skills/yellow_11.jpg",
  "data": {
    "description": {
      "value": "<p>At 1st level, you gain the ability to channel celestial energy to heal wounds. You have a pool of d6s that you spend to fuel this healing. The number of dice in the pool equals 1 + your warlock level.</p>\n<p>As a bonus action, you can heal one creature you can see within 60 feet of you, spending dice from the pool. The maximum number of dice you can spend at once equals your Charisma modifier (minimum of one die). Roll the dice you spend, add them together, and restore a number of hit points equal toÂ the total.</p>\n<p>Your pool regains all expended dice when you finish a long rest.</p>",
      "chat": "",
      "unidentified": ""
    },
    "source": "",
    "activation": {
      "type": "bonus",
      "cost": 1,
      "condition": ""
    },
    "duration": {
      "value": null,
      "units": ""
    },
    "target": {
      "value": 1,
      "width": null,
      "units": "",
      "type": "creature"
    },
    "range": {
      "value": 60,
      "long": null,
      "units": "ft"
    },
    "uses": {
      "value": 0,
      "max": "0",
      "per": ""
    },
    "consume": {
      "type": "",
      "target": "",
      "amount": null
    },
    "ability": "",
    "actionType": "util",
    "attackBonus": 0,
    "chatFlavor": "",
    "critical": null,
    "damage": {
      "parts": [],
      "versatile": ""
    },
    "formula": "",
    "save": {
      "ability": "",
      "dc": null,
      "scaling": "spell"
    },
    "requirements": "",
    "recharge": {
      "value": null,
      "charged": false
    }
  },
  "effects": [],
  "sort": 0,
  "flags": {
    "itemacro": {
      "macro": {
        "data": {
          "_id": null,
          "name": "Healing Light",
          "type": "script",
          "author": "feceaHtk8xrriPzY",
          "img": "icons/svg/dice-target.svg",
          "scope": "global",
          "command": "// Remove healing from the item and resource costs. Right now this uses Primary Resources, adjust to fit your needs.\n// Item macro @target @item\n(async () => {\n    if(args[0].targets.length === 0) return ui.notifications.warn(`Please select a target.`);\n    const target = canvas.tokens.get(args[0].targets[0].id);\n    const itemD = args[0].item;\n    const actorD = await game.actors.get(args[0].actor._id);\n    const tokenD = await canvas.tokens.get(args[0].tokenId);\n    const resourceType = \"primary\";\n    const getData = await actorD.getRollData();\n    const mainRes = getData.resources[resourceType];\n    const curtRes = mainRes.value;\n    const maxRes = mainRes.max;\n    const chrBonus = getData.abilities.cha.mod;\n    const finalMax = Math.min(chrBonus, maxRes);\n    const healingType = \"healing\";\n    const minHeal = Math.clamped(curtRes, 0, target.actor.data.data.attributes.hp.max - target.actor.data.data.attributes.hp.value);\n    const content_heal = `<div style=\"vertical-align:top;display:flex;\"><img src=\"${target.data.img}\" style=\"border:none;\" height=\"30\" width=\"30\"> <span style=\"margin-left:10px;line-height:2.1em;\">${target.data.name} <b>HP:</b> ${target.actor.data.data.attributes.hp.value} / ${target.actor.data.data.attributes.hp.max}</span></div><hr><form class=\"flexcol\"><div class=\"form-group\"><label for=\"num\"><b>[${curtRes}/${maxRes}]</b> Dice to spend:</span></label><input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${maxRes}\" value=\"${minHeal}\"></input></div></form>`;\n    if(curtRes === 0) return ui.notifications.warn(`You are out of the required resources.`);\n    new Dialog({\n        title: itemD.name,\n        content: content_heal,\n        buttons: {\n            heal: {\n                icon: '<i class=\"fas fa-check\"></i>', label: 'Heal', callback: async (html) => {\n                    let number = Math.floor(Number(html.find('#num')[0].value));\n                    if (number < 1 || number > finalMax) {\n                        return ui.notifications.warn(`Invalid number of charges entered = ${number}. Aborting action.`);\n                    } else {\n                        let healDamage = new Roll(`${number}d6`).evaluate({ async: false });\n                        new MidiQOL.DamageOnlyWorkflow(actorD, tokenD, healDamage.total, healingType, [target], healDamage, { flavor: `(${CONFIG.DND5E.healingTypes[healingType]})`, itemCardId: args[0].itemCardId, useOther: false });\n                        let total = Number(curtRes - number);\n                        let resType = resourceType === \"primary\" ? \"data.resources.primary.value\" : resourceType === \"secondary\" ? \"data.resources.secondary.value\" : \"data.resources.tertiary.value\";\n                        let resUpdate = {};\n                        resUpdate[resType] = total;\n                        await tokenD.actor.update(resUpdate);\n                    }\n                }\n            }\n        },\n        default: \"heal\"\n    }).render(true);\n})();",
          "folder": null,
          "sort": 0,
          "permission": {
            "default": 0
          },
          "flags": {}
        }
      }
    },
    "midi-qol": {
      "onUseMacroName": "ItemMacro"
    },
    "core": {
      "sourceId": "Item.7aBe7O9ik2bycZ97"
    },
    "exportSource": {
      "world": "avadol_v2",
      "system": "dnd5e",
      "coreVersion": "0.8.8",
      "systemVersion": "1.3.5"
    }
  }
}